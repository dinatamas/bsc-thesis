def generate_unparser(grammar, outbuffer):
    outbuffer.write(boilerplate.format(verbatim = grammar.verbatim))

# ============================================================================
# Boilerplate.
# ============================================================================

boilerplate = '''# Generated by SASN's unparser_generator.
from grammar.grammar import *
from grammar.syntax_tree import TokenNode, RuleNode
from grammar.token import Token

class UnparserState:
    def __init__(self, syntax_tree):
        self.syntax_tree = syntax_tree
        self.snippet = ''

    def emit(self, string):
        self.snippet += string

def unparse_syntax_tree(node):
    state = UnparserState(node)
    unparse_syntax_tree_helper(node, state)
    return state.snippet

def unparse_syntax_tree_helper(node, state):
    if isinstance(node, TokenNode):
        if node.token.kind == '@ACTION':
            globals()['unparse_' + node.token.string](state)
        else:
            state.emit(node.token.string + " ")
    else:
        for child in node.children:
            unparse_syntax_tree_helper(child, state)

# ============================================================================
# Verbatim.
# ============================================================================

{verbatim}

'''
